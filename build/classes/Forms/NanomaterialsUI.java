/******************************************************************************
 *
 * @author Esteban Valderrama and Marcelo Marucho
 * Description: This class initializes a JInternalDesktop to show the SPM
 *              frame.
 *
 *****************************************************************************/
package Forms;
import Classes.AwtControlDemo;
import Classes.IonLibrary;
import Classes.Ions;
import Classes.LoadImageApp;
import Classes.NumericalScheme;
import Classes.Solute;
import Classes.Solvent;
import Classes.ThermodynamicProperties;
import Classes.Utilities; 
import Classes.PHModel;
import Classes.Results;
import Classes.SolverModel;
import Classes.polyfunc;
import static Classes.testenv.Linuxenv;
import static Classes.testenv.RAMmemtest;
import static Procedures.EmailAttachmentSender.sendEmailWithAttachments;
import Procedures.MoveFiles;
import Procedures.ReadFiles;
//import Procedures.CopyFiles;
//import Procedures.MoveFiles;
import Procedures.RunAnalysis;
import Procedures.SetEnvironment;
import Procedures.ShowMessages;
import Procedures.WriteFiles;
import Procedures.WriteFilesSignal;
import Procedures.ZipFiles;
import java.awt.Button;
import java.awt.Color;
import java.awt.Cursor;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.FileDialog;
//import java.awt.Image;
import java.awt.Toolkit;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
//import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FilenameFilter;
import java.io.IOException;
import java.math.BigDecimal;
import java.nio.file.Files;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
//import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import java.io.PrintWriter;
import static java.lang.Double.parseDouble;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.JProgressBar;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

/**
 *
 * @author Esteban
 */
 @SuppressWarnings("unchecked")
public class NanomaterialsUI extends javax.swing.JFrame implements ActionListener, 
                                        PropertyChangeListener{
     private Task task;
    /**
     * Creates new form Nanorods
     */
     
    public NanomaterialsUI() {
        initComponents();
        this.setLocationRelativeTo(null); // Open ModelsUI GUI in the center of the screen 
        emailaddress.setVisible(false);
        if (null != Utilities.getTheoryModel())
            switch (Utilities.getTheoryModel()) {
            case "PB":
                setTitle("Electrical Signal Propagation Along F-actins");
                pnlSteric.setEnabled(false);
                lblSolventDiameter.setEnabled(false);
                lblSolventAngstroms.setEnabled(false);
                txtSolventDiameter.setEnabled(false);
                txtSolventDiameter.setText("N/A");
                lblSolventConcentration.setEnabled(false);
                lblSolventMolar.setEnabled(false);
                txtSolventConcentration.setEnabled(false);
                txtSolventConcentration.setText("N/A");
                break;
            case "SPM":
                setTitle("Electrical Signal Propagation Along F-actins");
 
                break;
        }
        if (PHModel.getAnalysisType().equals("CYLINDRICAL_PROTEIN") || (PHModel.getAnalysisType().equals("NANOROD"))){
            lblSoluteChargeType.setText("* e/lambda:");
            lblSoluteChargeUnits.setText("[A]");
        }
         rbnExperimentalData.setVisible(false);
         lblSoluteChargeType.setVisible(false);
         lblSoluteChargeUnits.setVisible(false);
         txtSoluteCharge.setVisible(false);
         jButton2.setVisible(false);
         btnSolve1.setVisible(false);
         label.setVisible(false);
         
         
        // Get size of ModelsUI to make sure the internal frame fits
        Dimension desktopSize = ModelsUI.dkpModels.getSize();
        double width = desktopSize.getWidth();
        double height = desktopSize.getHeight();
        setSize((int) width, (int) height);
        setMaximumSize(new Dimension((int) width, (int) height));
        pack();
        NumericalScheme.setMultigrid("NO");
        Ions.setCounter(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        buttonGroup3 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        pnlElectrolyteDefinition = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        pnlIonData = new javax.swing.JPanel();
        cmbIon = new javax.swing.JComboBox();
        lblIonValence = new javax.swing.JLabel();
        lblIonConcentration = new javax.swing.JLabel();
        txtIonConcentration = new javax.swing.JTextField();
        lblIonDiameter = new javax.swing.JLabel();
        txtIonDiameter = new javax.swing.JTextField();
        lblIonSymbol = new javax.swing.JLabel();
        cmbValence = new javax.swing.JComboBox();
        lblElectroValue = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblIonData = new javax.swing.JTable();
        btnAdd = new javax.swing.JButton();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        lblElectroneutrality = new javax.swing.JLabel();
        lblMessage = new javax.swing.JLabel();
        lblIonMolar = new javax.swing.JLabel();
        lblIonAngstroms = new javax.swing.JLabel();
        lblIonAngstroms1 = new javax.swing.JLabel();
        lblIonDiameter1 = new javax.swing.JLabel();
        txtIonMobility = new javax.swing.JTextField();
        pnlDiameterType = new javax.swing.JPanel();
        rbnCrystal = new javax.swing.JRadioButton();
        rbnEffective = new javax.swing.JRadioButton();
        rbnHydrated = new javax.swing.JRadioButton();
        jPanel2 = new javax.swing.JPanel();
        pnlElectrostatic = new javax.swing.JPanel();
        lblDielectricConstant = new javax.swing.JLabel();
        txtDielectricConstant = new javax.swing.JTextField();
        pnlSteric = new javax.swing.JPanel();
        lblSolventConcentration = new javax.swing.JLabel();
        lblSolventMolar = new javax.swing.JLabel();
        lblSolventDiameter = new javax.swing.JLabel();
        txtSolventDiameter = new javax.swing.JTextField();
        lblSolventAngstroms = new javax.swing.JLabel();
        txtSolventConcentration = new javax.swing.JTextField();
        jPanel3 = new javax.swing.JPanel();
        jLabel15 = new javax.swing.JLabel();
        txtTemperature = new javax.swing.JTextField();
        lblTempUnits = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        txtcapacitanceresol = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        pnlNumericalRuntime = new javax.swing.JPanel();
        lblTolerance = new javax.swing.JLabel();
        jLabel30 = new javax.swing.JLabel();
        txtTolerance = new javax.swing.JTextField();
        lblResolutionAngstroms = new javax.swing.JLabel();
        lblResolution = new javax.swing.JLabel();
        txtResolution = new javax.swing.JTextField();
        lblMixing = new javax.swing.JLabel();
        txtMixing = new javax.swing.JTextField();
        lblResolutionAngstroms1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        btnSolve = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        lblSoluteRadius = new javax.swing.JLabel();
        txtSoluteRadius = new javax.swing.JTextField();
        lblSoluteAngstroms = new javax.swing.JLabel();
        pnlpHModel = new javax.swing.JPanel();
        rbnExperimentalData = new javax.swing.JRadioButton();
        rbnTheoreticalPred = new javax.swing.JRadioButton();
        lblSoluteChargeType = new javax.swing.JLabel();
        txtSoluteCharge = new javax.swing.JTextField();
        lblSoluteChargeUnits = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPHData = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        btnSolve1 = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        label = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        taskOutput = new javax.swing.JTextArea();
        saveresults = new javax.swing.JButton();
        emailaddress = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1175, 556));
        setResizable(false);
        setSize(new java.awt.Dimension(1175, 716));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        pnlElectrolyteDefinition.setBackground(new java.awt.Color(255, 255, 255));
        pnlElectrolyteDefinition.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Electrolyte Model", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 1, 14), java.awt.Color.blue)); // NOI18N
        pnlElectrolyteDefinition.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ion Model", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N

        pnlIonData.setBackground(new java.awt.Color(255, 255, 255));
        pnlIonData.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Ions Considered As Charged Hard Sphere", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        pnlIonData.setEnabled(false);

        cmbIon.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbIon.setEnabled(false);
        cmbIon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                cmbIonMouseReleased(evt);
            }
        });
        cmbIon.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbIonActionPerformed(evt);
            }
        });

        lblIonValence.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblIonValence.setText("*Valence:");
        lblIonValence.setEnabled(false);

        lblIonConcentration.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblIonConcentration.setText("*Conc:");
        lblIonConcentration.setEnabled(false);

        txtIonConcentration.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtIonConcentration.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtIonConcentration.setToolTipText("<html><div style=\\\"text-align: left;\\\"<br>Concentration of the Ions,<br>\ntypical values as 0.01 M  to 1.0 M are used.");
        txtIonConcentration.setEnabled(false);
        txtIonConcentration.setPreferredSize(new java.awt.Dimension(58, 28));
        txtIonConcentration.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtIonConcentrationMouseClicked(evt);
            }
        });
        txtIonConcentration.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIonConcentrationKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtIonConcentrationKeyReleased(evt);
            }
        });

        lblIonDiameter.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblIonDiameter.setText("Size:");
        lblIonDiameter.setEnabled(false);

        txtIonDiameter.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtIonDiameter.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtIonDiameter.setToolTipText("<html><div style=\\\"text-align: left;\\\"<br>Diameter of the Ions.");
        txtIonDiameter.setEnabled(false);
        txtIonDiameter.setPreferredSize(new java.awt.Dimension(58, 28));
        txtIonDiameter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIonDiameterKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtIonDiameterKeyReleased(evt);
            }
        });

        lblIonSymbol.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblIonSymbol.setText("*Ions:");
        lblIonSymbol.setEnabled(false);

        cmbValence.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        cmbValence.setEnabled(false);
        cmbValence.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbValenceActionPerformed(evt);
            }
        });

        lblElectroValue.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblElectroValue.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblElectroValue.setText("0.0");
        lblElectroValue.setEnabled(false);

        tblIonData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ion", "Valence, z", "Bulk Conc [M]", "Size, d [A]", "Relative Mobility"
            }
        ));
        tblIonData.setEnabled(false);
        tblIonData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblIonDataMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblIonData);

        btnAdd.setText("Add");
        btnAdd.setEnabled(false);
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update");
        btnUpdate.setEnabled(false);
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.setEnabled(false);
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        lblElectroneutrality.setText("Electroneutrality:");
        lblElectroneutrality.setEnabled(false);

        lblMessage.setForeground(new java.awt.Color(255, 51, 51));

        lblIonMolar.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblIonMolar.setText("[M]");
        lblIonMolar.setEnabled(false);

        lblIonAngstroms.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblIonAngstroms.setText("[A]");
        lblIonAngstroms.setEnabled(false);

        lblIonAngstroms1.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblIonAngstroms1.setText("K Mobility");
        lblIonAngstroms1.setEnabled(false);

        lblIonDiameter1.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblIonDiameter1.setText("Mob:");
        lblIonDiameter1.setEnabled(false);

        txtIonMobility.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtIonMobility.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtIonMobility.setToolTipText("<html><div style=\\\"text-align: left;\\\"<br>Dynamic Mobility of the Ion relative to the K mobility.");
        txtIonMobility.setEnabled(false);
        txtIonMobility.setPreferredSize(new java.awt.Dimension(58, 28));
        txtIonMobility.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtIonMobilityKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtIonMobilityKeyReleased(evt);
            }
        });

        javax.swing.GroupLayout pnlIonDataLayout = new javax.swing.GroupLayout(pnlIonData);
        pnlIonData.setLayout(pnlIonDataLayout);
        pnlIonDataLayout.setHorizontalGroup(
            pnlIonDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlIonDataLayout.createSequentialGroup()
                .addGroup(pnlIonDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(pnlIonDataLayout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnUpdate)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete))
                    .addGroup(pnlIonDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(pnlIonDataLayout.createSequentialGroup()
                            .addGap(202, 202, 202)
                            .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(pnlIonDataLayout.createSequentialGroup()
                            .addGap(267, 267, 267)
                            .addComponent(lblElectroneutrality)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(lblElectroValue, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(pnlIonDataLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlIonDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 646, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlIonDataLayout.createSequentialGroup()
                        .addComponent(lblIonSymbol)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbIon, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(3, 3, 3)
                        .addComponent(lblIonConcentration)
                        .addGap(4, 4, 4)
                        .addComponent(txtIonConcentration, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblIonMolar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lblIonValence)
                        .addGap(1, 1, 1)
                        .addComponent(cmbValence, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(1, 1, 1)
                        .addComponent(lblIonDiameter, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(txtIonDiameter, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(lblIonAngstroms)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblIonDiameter1, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(2, 2, 2)
                        .addComponent(txtIonMobility, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(lblIonAngstroms1)))
                .addGap(21, 21, 21))
        );
        pnlIonDataLayout.setVerticalGroup(
            pnlIonDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlIonDataLayout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .addGroup(pnlIonDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlIonDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lblIonDiameter1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(pnlIonDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblIonSymbol)
                            .addComponent(cmbIon, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIonConcentration)
                            .addComponent(txtIonConcentration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cmbValence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIonValence, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIonMolar)
                            .addComponent(lblIonDiameter)
                            .addComponent(txtIonDiameter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblIonAngstroms)))
                    .addGroup(pnlIonDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(lblIonAngstroms1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 27, Short.MAX_VALUE)
                        .addComponent(txtIonMobility, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlIonDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnAdd)
                    .addComponent(btnUpdate)
                    .addComponent(btnDelete))
                .addGap(1, 1, 1)
                .addComponent(lblMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlIonDataLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblElectroValue, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(lblElectroneutrality, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(12, 12, 12))
        );

        pnlDiameterType.setBackground(new java.awt.Color(255, 255, 255));
        pnlDiameterType.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Diameter Type", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N
        pnlDiameterType.setToolTipText("<html><div style=\\\"text-align: left;\\\"<br>X-ray crystallography gives the <br>distance between ions which is used <br>to estimate the radius of an atom's ion<br> in ionic crystals structure. They are <br>treated as if they are hard spheres <br>with radii such that the sum of ionic radii<br> of the cation and anion gives the <br>distance between the ions in a crystal lattice. <br> A major review of crystallographic data <br>led to the definition of revised ionic radii <br>because the crystal ionic radius is not a fixed <br>property of a given ion, but varies <br>with coordination number, spin state and other parameters. <br>These effective ionic radii <br>increase on descending a periodic <br>table group. Ionic size (for the same ion) <br>also increases with increasing coordination <br>number, and an ion in a high-spin state <br>will be larger than the same ion<br> in a low-spin state. In general, <br>effective ionic radius decreases with <br>increasing positive charge and increases<br> with increasing negative charge. <br>The concept can be extended to define<br> hydrated ions in liquid solutions taking<br> into consideration the solvation shell. <br> Shannon's Crystal and Effective ionic <br>radii data are tabulated here, <br>but the user can redefine existing ion species<br> and  define new ion species as well.");

        rbnCrystal.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rbnCrystal);
        rbnCrystal.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbnCrystal.setText("Crystal");
        rbnCrystal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbnCrystalActionPerformed(evt);
            }
        });

        rbnEffective.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rbnEffective);
        rbnEffective.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbnEffective.setText("Effective");
        rbnEffective.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbnEffectiveActionPerformed(evt);
            }
        });

        rbnHydrated.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup1.add(rbnHydrated);
        rbnHydrated.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbnHydrated.setText("Hydrated");
        rbnHydrated.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbnHydratedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlDiameterTypeLayout = new javax.swing.GroupLayout(pnlDiameterType);
        pnlDiameterType.setLayout(pnlDiameterTypeLayout);
        pnlDiameterTypeLayout.setHorizontalGroup(
            pnlDiameterTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDiameterTypeLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rbnCrystal)
                .addGap(51, 51, 51)
                .addComponent(rbnEffective)
                .addGap(47, 47, 47)
                .addComponent(rbnHydrated, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlDiameterTypeLayout.setVerticalGroup(
            pnlDiameterTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlDiameterTypeLayout.createSequentialGroup()
                .addGroup(pnlDiameterTypeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbnCrystal)
                    .addComponent(rbnEffective)
                    .addComponent(rbnHydrated))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap(141, Short.MAX_VALUE)
                .addComponent(pnlDiameterType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(182, 182, 182))
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(pnlIonData, javax.swing.GroupLayout.PREFERRED_SIZE, 677, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(pnlDiameterType, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlIonData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlElectrolyteDefinition.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 30, 690, 300));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Solvent Model", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N

        pnlElectrostatic.setBackground(new java.awt.Color(255, 255, 255));
        pnlElectrostatic.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Continuum Dielectric Medium To Model Polarization Effects", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        lblDielectricConstant.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblDielectricConstant.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblDielectricConstant.setText("*Dielectric Constant");
        lblDielectricConstant.setToolTipText("");

        txtDielectricConstant.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtDielectricConstant.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtDielectricConstant.setText("78.358");
        txtDielectricConstant.setToolTipText("<html><div style=\\\"text-align: left;\\\"<br>The dielectric constant is <br>the ratio of the permittivity of a medium <br>to that of free space,<br> It describes the ease by which a <br>dielectric medium may be polarized.<br> The  value displayed in this box <br>corresponds to water.");
        txtDielectricConstant.setMinimumSize(new java.awt.Dimension(58, 28));
        txtDielectricConstant.setPreferredSize(new java.awt.Dimension(58, 28));
        txtDielectricConstant.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtDielectricConstantKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout pnlElectrostaticLayout = new javax.swing.GroupLayout(pnlElectrostatic);
        pnlElectrostatic.setLayout(pnlElectrostaticLayout);
        pnlElectrostaticLayout.setHorizontalGroup(
            pnlElectrostaticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlElectrostaticLayout.createSequentialGroup()
                .addGap(86, 86, 86)
                .addComponent(lblDielectricConstant, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(txtDielectricConstant, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnlElectrostaticLayout.setVerticalGroup(
            pnlElectrostaticLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lblDielectricConstant, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(txtDielectricConstant, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pnlSteric.setBackground(new java.awt.Color(255, 255, 255));
        pnlSteric.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Molecules Represented as Neutral Spherical Ions To Model Crowding Effects", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 10))); // NOI18N

        lblSolventConcentration.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSolventConcentration.setText("*Concentration:");

        lblSolventMolar.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblSolventMolar.setText("[M]");

        lblSolventDiameter.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSolventDiameter.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lblSolventDiameter.setText("*Diameter:");

        txtSolventDiameter.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtSolventDiameter.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtSolventDiameter.setText("2.75");
        txtSolventDiameter.setToolTipText("<html><div style=\\\"text-align: left;\\\"<br>The value displayed in this box <br>corresponds to the experimental water molecule size.");
        txtSolventDiameter.setMinimumSize(new java.awt.Dimension(58, 28));
        txtSolventDiameter.setPreferredSize(new java.awt.Dimension(58, 28));
        txtSolventDiameter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSolventDiameterKeyTyped(evt);
            }
        });

        lblSolventAngstroms.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblSolventAngstroms.setText("[A]");

        txtSolventConcentration.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtSolventConcentration.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtSolventConcentration.setText("55.56");
        txtSolventConcentration.setToolTipText("<html><div style=\\\"text-align: left;\\\"<br>The value displayed in this box <br>corresponds to the experimental water concentration.");
        txtSolventConcentration.setMinimumSize(new java.awt.Dimension(58, 28));
        txtSolventConcentration.setPreferredSize(new java.awt.Dimension(58, 28));
        txtSolventConcentration.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSolventConcentrationKeyTyped(evt);
            }
        });

        javax.swing.GroupLayout pnlStericLayout = new javax.swing.GroupLayout(pnlSteric);
        pnlSteric.setLayout(pnlStericLayout);
        pnlStericLayout.setHorizontalGroup(
            pnlStericLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStericLayout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(lblSolventConcentration)
                .addGap(14, 14, 14)
                .addComponent(txtSolventConcentration, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(lblSolventMolar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(33, 33, 33)
                .addComponent(lblSolventDiameter)
                .addGap(12, 12, 12)
                .addComponent(txtSolventDiameter, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(lblSolventAngstroms, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(21, Short.MAX_VALUE))
        );
        pnlStericLayout.setVerticalGroup(
            pnlStericLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlStericLayout.createSequentialGroup()
                .addGroup(pnlStericLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSolventMolar, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlStericLayout.createSequentialGroup()
                        .addGap(5, 5, 5)
                        .addGroup(pnlStericLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblSolventConcentration, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSolventConcentration, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(lblSolventAngstroms, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(pnlStericLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(lblSolventDiameter, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pnlStericLayout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(txtSolventDiameter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(pnlSteric, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnlElectrostatic, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlElectrostatic, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlSteric, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlElectrolyteDefinition.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 30, 470, -1));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(""), "Accuracy", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel15.setText("*Number of Grid Points:");

        txtTemperature.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtTemperature.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtTemperature.setText("500");
        txtTemperature.setToolTipText("<html><div style=\\\"text-align: left;\\\"<br> The number of grid points N controls the accuracy and <br>computational cost in the calculation of the soliton solution. <br>The distance domain of the solution ranges from one filament end (e.g. the left end) <br> to xmax (e.g. vanishing soliton distance). <br>The time domain of the solution ranges from zero <br> to tmax (e.g. vanishing soliton time).The grid resolutions dh and dt represent <br> the regular separation distance between<br> two consecutive points in the corresponding domain discretized.<br> They are calculated as follows dh= xmax/(N-1) and dt=xmax/(N-1). <br>The Great the value of N the higher the resolution and the<br> computational cost. It is recommended to use values <br>between 100 and 1000. Note: This parameter is not<br> used for the accuracy of the capacitance calculation.");
        txtTemperature.setMinimumSize(new java.awt.Dimension(58, 28));
        txtTemperature.setPreferredSize(new java.awt.Dimension(58, 28));
        txtTemperature.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtTemperatureKeyTyped(evt);
            }
        });
        javax.swing.ToolTipManager.sharedInstance().setDismissDelay(80000);

        lblTempUnits.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblTempUnits.setEnabled(false);

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel16.setText("*Resolution:");

        txtcapacitanceresol.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtcapacitanceresol.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtcapacitanceresol.setText("0.1");
        txtcapacitanceresol.setToolTipText("<html><div style=\\\"text-align: left;\\\"<br> The grid resolution represents <br> the regular separation distance h between<br> two consecutive points in the domain discretized of the longuitudinal distance <br> along the filment to calculate the<br> capacitance properties numerically. <br>The default value provides a balance between<br> accuracy and computational cost. <br>The shorter the value for h, the higher <br>the required memory and the longer the computational <br>cost. It is recommended to use values between 0.075 A and 0.3 A.<br> Note: This parameter is not used for the accuracy ofthe soliton solution.");
        txtcapacitanceresol.setMinimumSize(new java.awt.Dimension(58, 28));
        txtcapacitanceresol.setPreferredSize(new java.awt.Dimension(58, 28));
        txtcapacitanceresol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtcapacitanceresolActionPerformed(evt);
            }
        });
        txtcapacitanceresol.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtcapacitanceresolKeyTyped(evt);
            }
        });
        javax.swing.ToolTipManager.sharedInstance().setDismissDelay(80000);

        jLabel1.setFont(new java.awt.Font("Ubuntu", 2, 14)); // NOI18N
        jLabel1.setText("[A]");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jLabel16)
                .addGap(2, 2, 2)
                .addComponent(txtcapacitanceresol, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblTempUnits)
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtcapacitanceresol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1))
                    .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(lblTempUnits))
                    .addComponent(jLabel16, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pnlElectrolyteDefinition.add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 224, 460, 70));

        pnlNumericalRuntime.setBackground(new java.awt.Color(255, 255, 255));
        pnlNumericalRuntime.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2), "Thermodynamic Conditions", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 1, 14), java.awt.Color.blue)); // NOI18N
        pnlNumericalRuntime.setToolTipText("");

        lblTolerance.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblTolerance.setText("* 4 <= pH <= 10:");

        txtTolerance.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtTolerance.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtTolerance.setText("7.0");
        txtTolerance.setToolTipText("<html><div style=\\\"text-align: left;\\\"<br>pH represents the acidity or alkalinity of a solution <br> on a logarithmic scale on which 7 is neutral, lower values are more <br> acid and higher values more alkaline. <br>If the pH is set equal to 7.0, the software <br>will use the parameter e / lambda defined by the user. <br>Otherwise, the software will use the Cong Molecular <br>Structure Model (ournal of Molecular Biology, 375(2):331 – 336, 2008),<br> and the APBS and PropKa codes (Nu-cleic Acids Research, <br>32(suppl 2):W665 – W667, 2004) to calculate the value <br> for the distance e / lambda parameter. ");
        txtTolerance.setMinimumSize(new java.awt.Dimension(58, 28));
        txtTolerance.setName(""); // NOI18N
        txtTolerance.setPreferredSize(new java.awt.Dimension(58, 28));
        txtTolerance.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtToleranceKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtToleranceKeyReleased(evt);
            }
        });
        javax.swing.ToolTipManager.sharedInstance().setDismissDelay(80000);

        lblResolutionAngstroms.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblResolutionAngstroms.setText("[K]");

        lblResolution.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblResolution.setText("*Temperature:");

        txtResolution.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtResolution.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtResolution.setText("298.15");
        txtResolution.setToolTipText("");
        txtResolution.setMinimumSize(new java.awt.Dimension(58, 28));
        txtResolution.setPreferredSize(new java.awt.Dimension(58, 28));
        txtResolution.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtResolutionActionPerformed(evt);
            }
        });
        txtResolution.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtResolutionKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtResolutionKeyReleased(evt);
            }
        });

        lblMixing.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblMixing.setText("*Viscocity:");

        txtMixing.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtMixing.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtMixing.setText("0.00089");
        txtMixing.setToolTipText("<html><div style=\\\"text-align: left;\\\"<br> Viscosity is a measure of a fluid's resistance to flow. <br> It describes the internal friction of a moving fluid. <br> A fluid with large viscosity resists motion because its molecular <br> makeup gives it a lot of internal friction. A fluid with low viscosity <br> flows easily because its molecular makeup results in <br> very little friction when it is in motion. <br> The default value is for water.");
        txtMixing.setMinimumSize(new java.awt.Dimension(58, 28));
        txtMixing.setName(""); // NOI18N
        txtMixing.setPreferredSize(new java.awt.Dimension(58, 28));
        txtMixing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtMixingActionPerformed(evt);
            }
        });
        txtMixing.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtMixingKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtMixingKeyReleased(evt);
            }
        });

        lblResolutionAngstroms1.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblResolutionAngstroms1.setText("[Kg/(m.s)]");

        javax.swing.GroupLayout pnlNumericalRuntimeLayout = new javax.swing.GroupLayout(pnlNumericalRuntime);
        pnlNumericalRuntime.setLayout(pnlNumericalRuntimeLayout);
        pnlNumericalRuntimeLayout.setHorizontalGroup(
            pnlNumericalRuntimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNumericalRuntimeLayout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(pnlNumericalRuntimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblMixing)
                    .addComponent(lblTolerance)
                    .addComponent(lblResolution))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNumericalRuntimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlNumericalRuntimeLayout.createSequentialGroup()
                        .addComponent(txtMixing, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblResolutionAngstroms1))
                    .addGroup(pnlNumericalRuntimeLayout.createSequentialGroup()
                        .addGroup(pnlNumericalRuntimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(txtTolerance, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtResolution, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblResolutionAngstroms, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(198, Short.MAX_VALUE))
        );
        pnlNumericalRuntimeLayout.setVerticalGroup(
            pnlNumericalRuntimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlNumericalRuntimeLayout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addGroup(pnlNumericalRuntimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblResolution, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtResolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblResolutionAngstroms, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlNumericalRuntimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblTolerance, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtTolerance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(pnlNumericalRuntimeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblMixing, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtMixing, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblResolutionAngstroms1, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        jLabel3.setForeground(java.awt.Color.black);
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel3.setText("Simulations may take several minutes. Please WAIT !");

        btnSolve.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSolve.setForeground(java.awt.Color.red);
        btnSolve.setText("Run JACFC");
        btnSolve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSolveActionPerformed(evt);
            }
        });

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0), 2)), "Filament Model", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP, new java.awt.Font("Tahoma", 1, 14), java.awt.Color.blue)); // NOI18N
        jPanel5.setForeground(java.awt.Color.black);

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, "", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.ABOVE_TOP), "External Stimulus", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N

        lblSoluteRadius.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSoluteRadius.setText("*Applied input voltage along the filament:");

        txtSoluteRadius.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtSoluteRadius.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtSoluteRadius.setText("0.15");
        txtSoluteRadius.setToolTipText("<html><div style=\\\"text-align: left;\\\"<br> Initial voltage drop between the filament ends<br>");
        txtSoluteRadius.setPreferredSize(new java.awt.Dimension(58, 28));
        txtSoluteRadius.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtSoluteRadiusMouseClicked(evt);
            }
        });
        txtSoluteRadius.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSoluteRadiusKeyTyped(evt);
            }
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtSoluteRadiusKeyReleased(evt);
            }
        });

        lblSoluteAngstroms.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblSoluteAngstroms.setText("[V]");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblSoluteRadius)
                .addGap(6, 6, 6)
                .addComponent(txtSoluteRadius, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(lblSoluteAngstroms)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblSoluteRadius, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtSoluteRadius, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSoluteAngstroms, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        txtSoluteRadius.getAccessibleContext().setAccessibleDescription("<html><div style=\\\"text-align: left;\\\"<br>Solute Size <br>.");

        pnlpHModel.setBackground(new java.awt.Color(255, 255, 255));
        pnlpHModel.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Filament Monomer Characterization", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Lucida Grande", 1, 13))); // NOI18N
        pnlpHModel.setPreferredSize(new java.awt.Dimension(448, 46));

        rbnExperimentalData.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(rbnExperimentalData);
        rbnExperimentalData.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbnExperimentalData.setText("Use Molecular Structure Data");
        rbnExperimentalData.setEnabled(false);
        rbnExperimentalData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbnExperimentalDataActionPerformed(evt);
            }
        });

        rbnTheoreticalPred.setBackground(new java.awt.Color(255, 255, 255));
        buttonGroup2.add(rbnTheoreticalPred);
        rbnTheoreticalPred.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        rbnTheoreticalPred.setText("PLEASE click this button to confirm default values / make changes.");
        rbnTheoreticalPred.setToolTipText("");
        rbnTheoreticalPred.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbnTheoreticalPredActionPerformed(evt);
            }
        });

        lblSoluteChargeType.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lblSoluteChargeType.setText("*Surface Charge:");
        lblSoluteChargeType.setToolTipText("");
        lblSoluteChargeType.setEnabled(false);

        txtSoluteCharge.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        txtSoluteCharge.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        txtSoluteCharge.setText("0.0");
        txtSoluteCharge.setToolTipText("<html><div style=\\\"text-align: left;\\\"<br>Define either the effective surface charge <br> density for spherical macroions or <br>the effective length (electron charge / axial charge density)  for <br>cylindrical macorions to characterize <br>the solute electrostatic properties <br>");
        txtSoluteCharge.setEnabled(false);
        txtSoluteCharge.setPreferredSize(new java.awt.Dimension(58, 28));
        txtSoluteCharge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSoluteChargeActionPerformed(evt);
            }
        });
        txtSoluteCharge.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSoluteChargeKeyTyped(evt);
            }
        });

        lblSoluteChargeUnits.setFont(new java.awt.Font("Tahoma", 2, 12)); // NOI18N
        lblSoluteChargeUnits.setText("[C/m2]");
        lblSoluteChargeUnits.setEnabled(false);

        jScrollPane1.setToolTipText("");

        tblPHData.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"54.45", "23.83", "-2.74", "1"}
            },
            new String [] {
                "Protein Length [A]", "FIlament Radius [A]", "e / lambda [A]", "Scaling  Number"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        tblPHData.setToolTipText("<html><div style=\\\"text-align: left;\\\"<br> The Protein Length parameter represents the protein <br> size before polymerization. The filament radius parameter represents the size <br> after G-actin polymerization. The e/lambda parameter represents <br> in Angstrom units the electron charge per axial charge density at pH 7.0. <br>This parameter will not be used if the pH level is changed. The dafault values of these parameters <br> are obtained from available protein and filament <br> molecular structures. <br> The transmission electric circuit model considers a <br> linear polymerization in which each electric circuit unit <br> represents one protein only. The Scaling Number parameter <br> considers more than one protein per electric circuit units to accountt for other polymerization conformations <br>. ");
        tblPHData.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tblPHData.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        javax.swing.ToolTipManager.sharedInstance().setDismissDelay(10000);
        jScrollPane1.setViewportView(tblPHData);

        jButton2.setText("Illustration");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                expdataActionPerformed(evt);
            }
        });

        jButton1.setText("Illustration");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nanosurfaceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlpHModelLayout = new javax.swing.GroupLayout(pnlpHModel);
        pnlpHModel.setLayout(pnlpHModelLayout);
        pnlpHModelLayout.setHorizontalGroup(
            pnlpHModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlpHModelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(rbnExperimentalData)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(rbnTheoreticalPred)
                .addGap(210, 210, 210))
            .addGroup(pnlpHModelLayout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(lblSoluteChargeType)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtSoluteCharge, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(3, 3, 3)
                .addComponent(lblSoluteChargeUnits, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 565, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(pnlpHModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlpHModelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(547, Short.MAX_VALUE)))
            .addGroup(pnlpHModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlpHModelLayout.createSequentialGroup()
                    .addContainerGap(562, Short.MAX_VALUE)
                    .addComponent(jButton1)
                    .addContainerGap()))
        );
        pnlpHModelLayout.setVerticalGroup(
            pnlpHModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlpHModelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlpHModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbnExperimentalData)
                    .addComponent(rbnTheoreticalPred))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnlpHModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlpHModelLayout.createSequentialGroup()
                        .addGroup(pnlpHModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblSoluteChargeType, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtSoluteCharge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblSoluteChargeUnits, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 22, Short.MAX_VALUE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
            .addGroup(pnlpHModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlpHModelLayout.createSequentialGroup()
                    .addGap(0, 77, Short.MAX_VALUE)
                    .addComponent(jButton2)))
            .addGroup(pnlpHModelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(pnlpHModelLayout.createSequentialGroup()
                    .addComponent(jButton1)
                    .addGap(0, 79, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(241, 241, 241))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(pnlpHModel, javax.swing.GroupLayout.PREFERRED_SIZE, 658, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnlpHModel, javax.swing.GroupLayout.DEFAULT_SIZE, 128, Short.MAX_VALUE))
        );

        btnSolve1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        btnSolve1.setText("<html><div style=\\\"text-align: center;\\\"<br>Generate Input File <br> to Run CSDFTS Manually");
        btnSolve1.setEnabled(false);
        btnSolve1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSolve1ActionPerformed(evt);
            }
        });

        progressBar.setStringPainted(true);

        label.setText("Starting....");

        taskOutput.setBackground(java.awt.Color.white);
        taskOutput.setColumns(20);
        taskOutput.setFont(new java.awt.Font("Ubuntu", 0, 12)); // NOI18N
        taskOutput.setRows(5);
        taskOutput.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Progress Update", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jScrollPane3.setViewportView(taskOutput);

        saveresults.setText("Download Results");
        saveresults.setEnabled(false);
        saveresults.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveresultsActionPerformed(evt);
            }
        });

        emailaddress.setText("write your email here !");
        emailaddress.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnlElectrolyteDefinition, javax.swing.GroupLayout.PREFERRED_SIZE, 1175, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(saveresults, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(pnlNumericalRuntime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(progressBar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 308, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(label, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnSolve, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(724, Short.MAX_VALUE)
                    .addComponent(btnSolve1, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(296, 296, 296)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(276, Short.MAX_VALUE)
                    .addComponent(emailaddress, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(581, 581, 581)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnlElectrolyteDefinition, javax.swing.GroupLayout.PREFERRED_SIZE, 342, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(9, 9, 9)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(pnlNumericalRuntime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(label)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnSolve, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(77, 77, 77))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(saveresults)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(545, Short.MAX_VALUE)
                    .addComponent(btnSolve1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(119, 119, 119)))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                    .addContainerGap(614, Short.MAX_VALUE)
                    .addComponent(emailaddress, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(55, 55, 55)))
        );

        progressBar.getAccessibleContext().setAccessibleParent(this);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 665, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveresultsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveresultsActionPerformed
//       generate the simulationresults.zip file and open it
           String todayAsString = 
                    new SimpleDateFormat("MM-dd-yyyy__HH-mm-ss").
                            format(new Date());
        String exe24 = Utilities.getAnalysisPath();
        File dir = new File(exe24);
        String zipDir = Utilities.getAnalysisPath()+
        File.separatorChar +todayAsString +"_"+ "simulationresults.zip";
        ZipFiles.zipDirectory(dir, zipDir);

        //
        if (Desktop.isDesktopSupported()) {
            try {
                //               ZipFiles zipFiles = new ZipFiles();
                String zipDirName = Utilities.getAnalysisPath()+
                File.separatorChar +todayAsString +"_"+ "simulationresults.zip";
                File f = new File(zipDirName);
                // System.out.println(f.getAbsolutePath());//
                if(f.exists() && !f.isDirectory()){
                    File myFile = new File(zipDirName);
                    Desktop.getDesktop().open(myFile);
                }else{
                    Toolkit.getDefaultToolkit().beep();
                    JOptionPane.showMessageDialog(null,
                        ShowMessages.getOpenUserManual(), null,
                        JOptionPane.WARNING_MESSAGE);
                }
            } catch (IOException ex) {
                Toolkit.getDefaultToolkit().beep();
                JOptionPane.showMessageDialog(null,
                    ShowMessages.getNoPDFSoftware(), null,
                    JOptionPane.ERROR_MESSAGE);
            }
        }
        //          String exe2 = "rm "+zipDir;
        //          RunAnalysis executable2 = new RunAnalysis(exe2);
// send user an email with attachment simulationresults.zip 
        // SMTP info
 
//        String host = "smtp.gmail.com";
//        String port = "587";
//        String mailFrom = "falseemail";
//        String password = "falsepass";
//        // message info
//        String mailTo = emailaddress.getText();
//        String subject = "JACFC simulation results";
//        String message = "Thanks for using JACFC. Replay to this email if you have any question";
//
//        // attachments
//        String[] attachFiles = new String[1];
//        attachFiles[0] = zipDir;
//
//        Thread t = new Thread(new Runnable() {
//            public void run() {
//                JOptionPane.showMessageDialog(null, "Email Sent. Thanks !!", "WAIT ! sending email...",
//                        JOptionPane.PLAIN_MESSAGE);
//            }
//        });
//        t.start();
//        try {
//            sendEmailWithAttachments(host, port, mailFrom, password, mailTo,
//                    subject, message, attachFiles);
//            System.out.println("Email sent.");
//            emailaddress.setText("Email sent.");
//        } catch (Exception ex) {
//            System.out.println("Could not send email.");
//            emailaddress.setText("Could not send email.");
//            ex.printStackTrace();
//        }
    }//GEN-LAST:event_saveresultsActionPerformed

    private void btnSolve1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSolve1ActionPerformed
        // TODO add your handling code here:
        /* This button correspond to "SOLVE" button, once the user hits this button the
        * program will create and save the input file, then the program will call
        * the fortran executable to start the computations. When the calculation are
        * finished a new window will pops up to select the plot type.
        */
        // this button is not used in the current version of the program
        // Get ion data
        int i=0;
        if (! rbnTheoreticalPred.isSelected()){
            JOptionPane.showMessageDialog(null, "Please select define monomer model option.",
                "ERROR", JOptionPane.ERROR_MESSAGE);
        }else{

            if (tblIonData.getRowCount()==0){
                JOptionPane.showMessageDialog(null, "Please add ions to the electrolyte and try again.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
            }else{
                for (i = 0; i < tblIonData.getRowCount(); i++){
                    Ions.symbol[i] = tblIonData.getValueAt(i, 0).toString();
                    Ions.valence[i] = tblIonData.getValueAt(i, 1).toString();
                    Ions.concentration[i] = tblIonData.getValueAt(i, 2).toString();
                    if(null != Utilities.getTheoryModel())
                    switch (Utilities.getTheoryModel()) {
                        case "PB":
                        Ions.strDiameter[i] = "1.0";
                        Ions.strMobility[i] = tblIonData.getValueAt(i, 4).toString();
                        break;
                        case "SPM":
                        Ions.strDiameter[i] = tblIonData.getValueAt(i, 3).toString();
                        Ions.strMobility[i] = tblIonData.getValueAt(i, 4).toString();
                        break;
                    }
                }
            }
        }

        // Get Solvent data
        Solvent.setDielectric(txtDielectricConstant.getText());
        if("SPM".equals(Utilities.getTheoryModel())){
            if (i > 0) {
                //   Solvent.setDielectric(txtDielectricConstant.getText());
                Solvent.setValence("0.0");
                Solvent.setConcentration(txtSolventConcentration.getText());
                Solvent.setDiameter(txtSolventDiameter.getText());
                Ions.symbol[i] = "Wa";
                Ions.valence[i] = Solvent.getValence();
                Ions.concentration[i] = Solvent.getConcentration();
                Ions.strDiameter[i] = Solvent.getDiameter();
                Ions.strMobility[i] = "0.00";
                Ions.setCounter(tblIonData.getRowCount() + 1);
            }else{
                return;
            }
        }else{
            Solvent.setValence("0.0");
            Solvent.setConcentration(txtSolventConcentration.getText());
            Solvent.setDiameter(txtSolventDiameter.getText());
            Ions.symbol[i] = "Wa";
            Ions.valence[i] = Solvent.getValence();
            Ions.concentration[i] = "55.56";
            Ions.strDiameter[i] = "2.75";
            Ions.strMobility[i] = "0.00";
            Ions.setCounter(tblIonData.getRowCount() + 1);
        }
        ThermodynamicProperties.setTemperature(txtTemperature.getText());
        // Get numerical definition
        NumericalScheme.setResolution(txtResolution.getText());
        NumericalScheme.setCutoff(txtTolerance.getText());
        NumericalScheme.setMesh(txtMixing.getText());
        // get solute data
        Solute.setRadius(txtSoluteRadius.getText());
        Solute.setCharge(txtSoluteCharge.getText());
        if (null != SolverModel.getModel())switch (SolverModel.getModel()) {
            case "NANOPARTICLE":
            PHModel.setpKA((String) tblPHData.getModel().getValueAt(0, 0));
            PHModel.setpKB((String) tblPHData.getModel().getValueAt(0, 1));
            PHModel.setNtotal((String) tblPHData.getModel().getValueAt(0, 2));
            PHModel.setpH((String) tblPHData.getModel().getValueAt(0, 3));
            break;
            case "OTHER":
            PHModel.setpKA("0.0");
            PHModel.setpKB("0.0");
            PHModel.setNtotal("0.0");
            PHModel.setpH("0.0");
            break;
        }
        /* Check if electroneutrality condiction is not satisfied, erase all the
        * array values, restart ion counter, electroneutrality and temporal elec.
        * When the electroneutrality is satisfied, create-save the input file and
        * call the fortran executable.
        */
        if (0.0 != Ions.getNeutrality()
            || !"0.0".equals(lblElectroValue.getText())){
            Arrays.fill(Ions.symbol, null );
            Arrays.fill(Ions.valence, null);
            Arrays.fill(Ions.concentration, null);
            Arrays.fill(Ions.strDiameter, null);
            Arrays.fill(Ions.strMobility, null);
            Ions.setNeutrality(0.0);
            Ions.tempNeutrality = 0.0;
            Ions.setCounter(0);
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ShowMessages.getElectroneutralityNotSatisfied(),
                "ERROR", JOptionPane.ERROR_MESSAGE);
        } else{
            SetEnvironment.create_subdirectories();
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            long lStartTime = System.nanoTime();
            switch (Solute.getType()){
                case "SPHERE":
                //write input file
                WriteFilesSignal.write_sphere();
                {
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(NanomaterialsUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                File f = new File("waitfile.tmp");
                while(f.exists() && !f.isDirectory()) {
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(RunAnalysis.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                break;
                case "CYLINDER":
                WriteFilesSignal.write_cylinder();
                // RunAnalysis.run_cylinder();
                {
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(NanomaterialsUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                File f2 = new File("waitfile.tmp");
                while(f2.exists() && !f2.isDirectory()) {
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(RunAnalysis.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                break;
            }
            long lEndTime = System.nanoTime();
            long output = lEndTime - lStartTime;
            //computing time calculation
            System.out.println("Elapsed time in seconds: " + output / 1000000000);
            //visulaization results
            //ResultsUI Results = new ResultsUI();
            //Results.show();
            //Results.requestFocus();
            //Results.toFront();
            //File file = new File("inp.dat");
            //try {
                //    boolean result = Files.deleteIfExists(file.toPath());
                //} catch (IOException ex) {
                //    Logger.getLogger(NanomaterialsUI.class.getName()).log(Level.SEVERE, null, ex);
                //}
        }
        setCursor(null);
        dispose();
    }//GEN-LAST:event_btnSolve1ActionPerformed

    private void nanosurfaceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nanosurfaceActionPerformed
        // TODO add your handling code here:
        //show image
        //show image
        String filename = "build/classes/Images/nanoparticlemodel.png";
        JFrame f1 = new JFrame("Multi-scale Model");
        //f1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f1.add(new LoadImageApp(filename));
        f1.pack();
        f1.setLocationRelativeTo(null);
        f1.setVisible(true);
    }//GEN-LAST:event_nanosurfaceActionPerformed

    private void expdataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_expdataActionPerformed
        // TODO add your handling code here:
        //show image
        String filename = "build/classes/Images/experimentalmodel.png";
        //if (args.length>0) filename = args[0];
        JFrame f1 = new JFrame("Experimental Nanoparticle Model");
        //f1.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        f1.add(new LoadImageApp(filename));
        f1.pack();
        f1.setLocationRelativeTo(null);
        f1.setVisible(true);
    }//GEN-LAST:event_expdataActionPerformed

    private void txtSoluteChargeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSoluteChargeKeyTyped
        // Validate only numbers
        char c = evt.getKeyChar();

        if (c == KeyEvent.VK_PERIOD && txtSoluteCharge.getText().contains(".")){
            getToolkit().beep();
            evt.consume();
        }
        if (c != KeyEvent.VK_MINUS && !Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE
            && c != KeyEvent.VK_DELETE && c != KeyEvent.VK_PERIOD){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtSoluteChargeKeyTyped

    private void txtSoluteChargeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSoluteChargeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSoluteChargeActionPerformed

    private void rbnTheoreticalPredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbnTheoreticalPredActionPerformed
        // If pH approach is selected for nanoparticles using theoretical model
        // proceed with the following statement
        tblPHData.putClientProperty("terminateEditOnFocusLost", Boolean.TRUE);
        if (rbnTheoreticalPred.isSelected()){
            set_enabled_SoluteData_false();
            PHModel.setusepH("YES");
            SolverModel.setModel("NANOPARTICLE");
            tblPHData.setEnabled(true);
            set_enabled_SoluteData_false();
        }else{
            buttonGroup3.clearSelection();
            tblPHData.setEnabled(false);
        }
    }//GEN-LAST:event_rbnTheoreticalPredActionPerformed

    private void rbnExperimentalDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbnExperimentalDataActionPerformed
        // If pH approach is selected for Nanoparticles using experimental model
        // proceed with the following statement
        if (rbnExperimentalData.isSelected()){
            set_enabled_SoluteData_true();
            SolverModel.setModel("OTHER");
            tblPHData.setEnabled(false);
        }else{
            set_enabled_SoluteData_false();
            buttonGroup3.clearSelection();
            tblPHData.setEnabled(false);
        }

    }//GEN-LAST:event_rbnExperimentalDataActionPerformed

    private void txtSoluteRadiusKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSoluteRadiusKeyReleased
        // Validate txtSoluteRadius field only for values different than zero.
        if ("0.000000".equals(txtSoluteRadius.getText())){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ShowMessages.getZeroRadius(),
                "ERROR", JOptionPane.ERROR_MESSAGE);
            txtSoluteRadius.setText("");
            txtSoluteRadius.requestFocus();
        }
    }//GEN-LAST:event_txtSoluteRadiusKeyReleased

    private void txtSoluteRadiusKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSoluteRadiusKeyTyped
        // Validate only numbers
        char c = evt.getKeyChar();
        if (c == KeyEvent.VK_PERIOD && txtSoluteRadius.getText().contains(".")){
            getToolkit().beep();
            evt.consume();
        }
        if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE
            && c != KeyEvent.VK_DELETE && c != KeyEvent.VK_PERIOD){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtSoluteRadiusKeyTyped

    private void txtSoluteRadiusMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSoluteRadiusMouseClicked
        // Clear contents
        txtSoluteRadius.setText("");
    }//GEN-LAST:event_txtSoluteRadiusMouseClicked

    private void btnSolveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSolveActionPerformed

        /* This button correspond to "SOLVE" button, once the user hits this button the
        * program will create and save the input file, then the program will call
        * the fortran executable to start the computations. When the calculation are
        * finished a new window will pops up to select the plot type.
        */
        String workingdir = System.getProperty("user.dir");
//        String pathdir = Utilities.getAnalysisPath();
          String homedir = System.getProperty("home.dir");
//                 String dir3 = workingdir+"/filepaths.txt";
//        try {
//            PrintWriter writer = new PrintWriter(dir3, "UTF-8");
//            writer.println(workingdir);
//            writer.println(homedir);
//            writer.close();
//        } catch (IOException ex) {
//            Logger.getLogger(NanomaterialsUI.class.getName()).log(Level.SEVERE, null, ex);
//        }

        // Get ion data
        int i=0;
        if (! rbnTheoreticalPred.isSelected()){
            JOptionPane.showMessageDialog(null, "Please click the buttom to confirm the Filament and Monomer characterization configuration.",
                "ERROR", JOptionPane.ERROR_MESSAGE);
        }else{
            if (tblIonData.getRowCount()==0){
                JOptionPane.showMessageDialog(null, "Please add ions to the electrolyte and try again.",
                    "ERROR", JOptionPane.ERROR_MESSAGE);
            }else{
                for (i = 0; i < tblIonData.getRowCount(); i++){
                    Ions.symbol[i] = tblIonData.getValueAt(i, 0).toString();
                    Ions.valence[i] = tblIonData.getValueAt(i, 1).toString();
                    Ions.concentration[i] = tblIonData.getValueAt(i, 2).toString();
                    if(null != Utilities.getTheoryModel())
                    switch (Utilities.getTheoryModel()) {
                        case "PB":
                        Ions.strDiameter[i] = "1.0";
                        Ions.strMobility[i] = tblIonData.getValueAt(i, 4).toString();
                        break;
                        case "SPM":
                        Ions.strDiameter[i] = tblIonData.getValueAt(i, 3).toString();
                        Ions.strMobility[i] = tblIonData.getValueAt(i, 4).toString();
                        break;
                    }
                }
            }
        }
        // Get Solvent data
        Solvent.setDielectric(txtDielectricConstant.getText());
        if("SPM".equals(Utilities.getTheoryModel())){
            if (i > 0) {
                //   Solvent.setDielectric(txtDielectricConstant.getText());
                Solvent.setValence("0.0");
                Solvent.setConcentration(txtSolventConcentration.getText());
                Solvent.setDiameter(txtSolventDiameter.getText());
                Ions.symbol[i] = "H2O";
                Ions.valence[i] = Solvent.getValence();
                Ions.concentration[i] = Solvent.getConcentration();
                Ions.strDiameter[i] = Solvent.getDiameter();
                Ions.strMobility[i] = "0.00";
                Ions.setCounter(tblIonData.getRowCount() + 1);
            }else{
                return;
            }
        }else{
            Solvent.setValence("0.0");
            Solvent.setConcentration(txtSolventConcentration.getText());
            Solvent.setDiameter(txtSolventDiameter.getText());
            Ions.symbol[i] = "H2O";
            Ions.valence[i] = Solvent.getValence();
            Ions.concentration[i] = "55.56";
            Ions.strDiameter[i] = "2.75";
            Ions.strMobility[i] = "0.00";
            Ions.setCounter(tblIonData.getRowCount() + 1);
        }
        ThermodynamicProperties.setTemperature(txtTemperature.getText());
        // Get numerical definition
        NumericalScheme.setResolution(txtResolution.getText());
        NumericalScheme.setCutoff(txtTolerance.getText());
        NumericalScheme.setMesh(txtMixing.getText());
        NumericalScheme.setMultigrid(txtcapacitanceresol.getText());
        // get solute data
        Solute.setRadius(txtSoluteRadius.getText());
        Solute.setCharge(txtSoluteCharge.getText());
        if (null != SolverModel.getModel())switch (SolverModel.getModel()) {
            case "NANOPARTICLE":
            PHModel.setpKA((String) tblPHData.getModel().getValueAt(0, 0));
            PHModel.setpKB((String) tblPHData.getModel().getValueAt(0, 1));
            PHModel.setNtotal((String) tblPHData.getModel().getValueAt(0, 2));
            PHModel.setpH((String) tblPHData.getModel().getValueAt(0, 3));
            break;
            case "OTHER":
            PHModel.setpKA("0.0");
            PHModel.setpKB("0.0");
            PHModel.setNtotal("0.0");
            PHModel.setpH("0.0");
            break;
        }
                // charge calculation if pH is not equal to 7
         double num = Double.parseDouble(txtTolerance.getText());
        if ((num) >= 4.0 && (num) <= 10){
            if("7.0".equals(txtTolerance.getText())){
            NumericalScheme.setCutoff(txtTolerance.getText());
            }else{
            double chargep = polyfunc.evaluate(num);
//            System.out.println(chargep);
            PHModel.setNtotal((String) String.valueOf(chargep));
//            System.out.println(PHModel.getNtotal());
            }
        }else{
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ShowMessages.getaddPH(),
                "ERROR", JOptionPane.ERROR_MESSAGE);
            txtTolerance.setText("7.0");
//            txtTolerance.requestFocus();
        }   
        /* Check if electroneutrality condiction is not satisfied, erase all the
        * array values, restart ion counter, electroneutrality and temporal elec.
        * When the electroneutrality is satisfied, create-save the input file and
        * call the fortran executable.
        */
        if (0.0 != Ions.getNeutrality()
            || !"0.0".equals(lblElectroValue.getText())){
            Arrays.fill(Ions.symbol, null );
            Arrays.fill(Ions.valence, null);
            Arrays.fill(Ions.concentration, null);
            Arrays.fill(Ions.strDiameter, null);
            Arrays.fill(Ions.strMobility, null);
            Ions.setNeutrality(0.0);
            Ions.tempNeutrality = 0.0;
            Ions.setCounter(0);
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ShowMessages.getElectroneutralityNotSatisfied(),
                "ERROR", JOptionPane.ERROR_MESSAGE);
        } else{
            SetEnvironment.create_subdirectories();
            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
            long lStartTime = System.nanoTime();
            //
//            String anyli = Utilities.getAnalysisPath();

            switch (Solute.getType()){
                case "SPHERE":
                btnSolve.setEnabled(false);
                setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                //we create new instance to:
                // run 12 times the cylindrial CSDFT to generate capacitance Co and parameter b
                // run the sphere code to calculate soliton properties
                task = new Task();
                task.addPropertyChangeListener(this);
                task.execute();    

                {
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(NanomaterialsUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                File f = new File("waitfile.tmp");
                while(f.exists() && !f.isDirectory()) {
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(RunAnalysis.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }

                {
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(NanomaterialsUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }


                break;
                case "CYLINDER":
                // this case i not used in the current version of the program
                WriteFilesSignal.write_cylinder();
                // RunAnalysis.run_cylinder();
                {
                    try {
                        RunAnalysis.run_cylinder();
                    } catch (IOException ex) {
                        Logger.getLogger(NanomaterialsUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                {
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(NanomaterialsUI.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                File f2 = new File("waitfile.tmp");
                while(f2.exists() && !f2.isDirectory()) {
                    try {
                        Thread.sleep(1000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(RunAnalysis.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
                String exe4 = "pkill -n watch ";
                RunAnalysis executable4 = new RunAnalysis(exe4);
                String exe6 = "pkill -f gnome-system-monitor ";
                RunAnalysis executable6 = new RunAnalysis(exe6);
                break;
            }
            long lEndTime = System.nanoTime();
            long output = lEndTime - lStartTime;
            //computing time calculation
            System.out.println("Elapsed time in seconds: " + output / 1000000000);
            //visulaization results
            File file = new File("inp.dat");
            try {
                boolean result = Files.deleteIfExists(file.toPath());
            } catch (IOException ex) {
                Logger.getLogger(NanomaterialsUI.class.getName()).log(Level.SEVERE, null, ex);
            }
        }

        setCursor(null);
    }//GEN-LAST:event_btnSolveActionPerformed

    private void txtMixingKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMixingKeyReleased
        // Validate txtMixing field only for values different than zero.
        if ("0.000000000000".equals(txtMixing.getText())){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ShowMessages.getZeroResolution(),
                "ERROR", JOptionPane.ERROR_MESSAGE);
            txtMixing.setText("");
            txtMixing.requestFocus();
        }
    }//GEN-LAST:event_txtMixingKeyReleased

    private void txtMixingKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtMixingKeyTyped
        // Validate only numbers
        char c = evt.getKeyChar();
        if (c == KeyEvent.VK_PERIOD && txtMixing.getText().contains(".")){
            getToolkit().beep();
            evt.consume();
        }
        if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE
            && c != KeyEvent.VK_DELETE && c != KeyEvent.VK_PERIOD){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtMixingKeyTyped

    private void txtMixingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtMixingActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtMixingActionPerformed

    private void txtResolutionKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtResolutionKeyReleased
        // Validate txtResolution field only for values different than zero.
        if ("0.000000000000".equals(txtResolution.getText())){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ShowMessages.getZeroResolution(),
                "ERROR", JOptionPane.ERROR_MESSAGE);
            txtResolution.setText("");
            txtResolution.requestFocus();
        }
    }//GEN-LAST:event_txtResolutionKeyReleased

    private void txtResolutionKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtResolutionKeyTyped
        // Validate only numbers
        char c = evt.getKeyChar();
        if (c == KeyEvent.VK_PERIOD && txtResolution.getText().contains(".")){
            getToolkit().beep();
            evt.consume();
        }
        if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE
            && c != KeyEvent.VK_DELETE && c != KeyEvent.VK_PERIOD){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtResolutionKeyTyped

    private void txtResolutionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtResolutionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtResolutionActionPerformed

    private void txtToleranceKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtToleranceKeyReleased
        // Validate txtResolution field only for values different than zero.
        if ("0.000000000000".equals(txtTolerance.getText())){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ShowMessages.getZeroResolution(),
                "ERROR", JOptionPane.ERROR_MESSAGE);
            txtTolerance.setText("");
            txtTolerance.requestFocus();
        }
    }//GEN-LAST:event_txtToleranceKeyReleased

    private void txtToleranceKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtToleranceKeyTyped
        // Validate only numbers
        char c = evt.getKeyChar();
        if (c == KeyEvent.VK_PERIOD && txtTolerance.getText().contains(".")){
            getToolkit().beep();
            evt.consume();
        }
        if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE
            && c != KeyEvent.VK_DELETE && c != KeyEvent.VK_PERIOD){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtToleranceKeyTyped

    private void txtTemperatureKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtTemperatureKeyTyped
        // Validate only numbers
        char c = evt.getKeyChar();
        if (c == KeyEvent.VK_PERIOD && txtTemperature.getText().contains(".")){
            getToolkit().beep();
            evt.consume();
        }
        if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE
            && c != KeyEvent.VK_DELETE && c != KeyEvent.VK_PERIOD){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtTemperatureKeyTyped

    private void txtSolventConcentrationKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSolventConcentrationKeyTyped
        // Validate only numbers
        char c = evt.getKeyChar();
        if (c == KeyEvent.VK_PERIOD && txtSolventConcentration.getText().contains(".")){
            getToolkit().beep();
            evt.consume();
        }
        if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE
            && c != KeyEvent.VK_DELETE && c != KeyEvent.VK_PERIOD){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtSolventConcentrationKeyTyped

    private void txtSolventDiameterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSolventDiameterKeyTyped
        // Validate only numbers
        char c = evt.getKeyChar();
        if (c == KeyEvent.VK_PERIOD && txtSolventDiameter.getText().contains(".")){
            getToolkit().beep();
            evt.consume();
        }
        if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE
            && c != KeyEvent.VK_DELETE && c != KeyEvent.VK_PERIOD){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtSolventDiameterKeyTyped

    private void txtDielectricConstantKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDielectricConstantKeyTyped
        // Validate only numbers
        char c = evt.getKeyChar();
        if (c == KeyEvent.VK_PERIOD && txtDielectricConstant.getText().contains(".")){
            getToolkit().beep();
            evt.consume();
        }
        if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE
            && c != KeyEvent.VK_DELETE && c != KeyEvent.VK_PERIOD){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtDielectricConstantKeyTyped

    private void rbnHydratedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbnHydratedActionPerformed
        // TODO add your handling code here:
        if (rbnHydrated.isSelected()){
            String path = "HydratedIonLibrarysign.txt";
            Procedures.ReadFiles.read_libraries_sign(path);
            pnlIonData.setEnabled(true);
            lblElectroValue.setText("0.0");
            lblElectroneutrality.setEnabled(true);
            cmbIon.setModel(new DefaultComboBoxModel());
            cmbIon.addItem("");
            txtIonDiameter.setText("");
            txtIonMobility.setText("");
            DefaultComboBoxModel dcm = new DefaultComboBoxModel();
            cmbValence.setModel(dcm);
            dcm.removeAllElements();
            for (int ii = 0; ii < IonLibrary.getNumLines(); ii++){
                cmbIon.addItem(IonLibrary.symbol[ii]);
            }
            cmbIon.setEnabled(true);
            lblIonSymbol.setEnabled(true);
            Ions.setCounter(Ions.getCounter() + 1);
            btnAdd.setEnabled(true);
            btnUpdate.setEnabled(true);
            btnDelete.setEnabled(true);
            tblIonData.setEnabled(true);
        }else{
            pnlIonData.setEnabled(false);
        }
    }//GEN-LAST:event_rbnHydratedActionPerformed

    private void rbnEffectiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbnEffectiveActionPerformed
        /* This radiobutton correspond to "EFFECTIVE DIAMETER", once the user selects
        * this option the peogram will read Shannon Effective Library.
        */
        if (rbnEffective.isSelected()){
            String path = "ShannonEffectiveIonLibrarysign.txt";
            Procedures.ReadFiles.read_libraries_sign(path);
            pnlIonData.setEnabled(true);
            lblElectroValue.setText("0.0");
            lblElectroneutrality.setEnabled(true);
            cmbIon.setModel(new DefaultComboBoxModel());
            cmbIon.addItem("");
            txtIonDiameter.setText("");
            txtIonMobility.setText("");
            DefaultComboBoxModel dcm = new DefaultComboBoxModel();
            cmbValence.setModel(dcm);
            dcm.removeAllElements();
            for (int ii = 0; ii < IonLibrary.getNumLines(); ii++){
                cmbIon.addItem(IonLibrary.symbol[ii]);
            }
            cmbIon.setEnabled(true);
            lblIonSymbol.setEnabled(true);
            Ions.setCounter(Ions.getCounter() + 1);
            btnAdd.setEnabled(true);
            btnUpdate.setEnabled(true);
            btnDelete.setEnabled(true);
            tblIonData.setEnabled(true);
        }else{
            pnlIonData.setEnabled(false);
        }
    }//GEN-LAST:event_rbnEffectiveActionPerformed

    private void rbnCrystalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbnCrystalActionPerformed
        /* This radiobutton correspond to "CRYSTAL DIAMETER", once the user selects
        * this option the peogram will read Shannon Crystal Library.
        */
        if (rbnCrystal.isSelected()){
            String path = "ShannonCrystalIonLibrarysign.txt";
            Procedures.ReadFiles.read_libraries_sign(path);
            pnlIonData.setEnabled(true);
            lblElectroValue.setText("0.0");
            lblElectroneutrality.setEnabled(true);
            cmbIon.setModel(new DefaultComboBoxModel());
            cmbIon.addItem("");
            txtIonDiameter.setText("");
            txtIonMobility.setText("");
            DefaultComboBoxModel dcm = new DefaultComboBoxModel();
            cmbValence.setModel(dcm);
            dcm.removeAllElements();
            for (int ii = 0; ii < IonLibrary.getNumLines(); ii++){
                cmbIon.addItem(IonLibrary.symbol[ii]);
            }
            cmbIon.setEnabled(true);
            lblIonSymbol.setEnabled(true);
            Ions.setCounter(Ions.getCounter() + 1);
            btnAdd.setEnabled(true);
            btnUpdate.setEnabled(true);
            btnDelete.setEnabled(true);
            tblIonData.setEnabled(true);
        }else{
            pnlIonData.setEnabled(false);
        }
    }//GEN-LAST:event_rbnCrystalActionPerformed

    private void txtIonMobilityKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIonMobilityKeyReleased
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIonMobilityKeyReleased

    private void txtIonMobilityKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIonMobilityKeyTyped
        // TODO add your handling code here:
    }//GEN-LAST:event_txtIonMobilityKeyTyped

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        DefaultTableModel model = (DefaultTableModel) tblIonData.getModel();
        if(tblIonData.getSelectedRow()==-1){
            if(tblIonData.getRowCount()==0){
                lblMessage.setText("Table is empty");
            }else{
                lblMessage.setText("You must select an ion");
            }
        }else{
            String rho_del;
            String z_del;
            double prev, prev2;
            z_del = model.getValueAt(tblIonData.getSelectedRow(), 1).toString();
            rho_del = model.getValueAt(tblIonData.getSelectedRow(), 2).toString();
            prev = Double.parseDouble(z_del)*Double.parseDouble(rho_del);
            prev2 = Double.parseDouble(lblElectroValue.getText()) - prev;
            lblElectroValue.setText(String.valueOf(prev2));

            model.removeRow(tblIonData.getSelectedRow());
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        lblMessage.setText("");
        DefaultTableModel model = (DefaultTableModel) tblIonData.getModel();
        if(tblIonData.getSelectedRow()==-1){
            if(tblIonData.getRowCount()==0){
                lblMessage.setText("Table is empty");
            }else{
                lblMessage.setText("You must select an ion");
            }
        }else{
            double rho;
            double z;
            String rho_del;
            String z_del;
            double prev, prev2;
            z_del = model.getValueAt(tblIonData.getSelectedRow(), 1).toString();
            rho_del = model.getValueAt(tblIonData.getSelectedRow(), 2).toString();
            prev = Double.parseDouble(z_del)*Double.parseDouble(rho_del);
            prev2 = Double.parseDouble(lblElectroValue.getText()) - prev;
            lblElectroValue.setText(String.valueOf(prev2));

            model.setValueAt(cmbIon.getSelectedItem().toString(), tblIonData.getSelectedRow(),0);
            model.setValueAt(cmbValence.getSelectedItem().toString(), tblIonData.getSelectedRow(),1);
            model.setValueAt(txtIonConcentration.getText(), tblIonData.getSelectedRow(),2);
            model.setValueAt(txtIonDiameter.getText(), tblIonData.getSelectedRow(),3);
            model.setValueAt(txtIonMobility.getText(), tblIonData.getSelectedRow(),4);

            prev = Double.parseDouble(lblElectroValue.getText());
            z = Double.parseDouble(cmbValence.getSelectedItem().toString());
            rho = Double.parseDouble(txtIonConcentration.getText());
            Ions.get_electroneutrality(prev, z, rho);
            lblElectroValue.setText(String.valueOf(Ions.getNeutrality()));
        }
    }//GEN-LAST:event_btnUpdateActionPerformed

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        lblMessage.setText("");
        DefaultTableModel model = (DefaultTableModel) tblIonData.getModel();
        if(!txtIonConcentration.getText().trim().equals("") && !txtIonDiameter.getText().trim().equals("")){
            model.addRow(new Object[]{cmbIon.getSelectedItem().toString(),cmbValence.getSelectedItem().toString(),txtIonConcentration.getText(),txtIonDiameter.getText(),txtIonMobility.getText()});
            double rho;
            double z;
            double prev;
            prev = Double.parseDouble(lblElectroValue.getText());
            z = Double.parseDouble(cmbValence.getSelectedItem().toString());
            rho = Double.parseDouble(txtIonConcentration.getText());
            Ions.get_electroneutrality(prev, z, rho);
            lblElectroValue.setText(String.valueOf(Ions.getNeutrality()));
        }else if(txtIonConcentration.getText().trim().equals("")){
            lblMessage.setText("Ion concentration should not be left in blank");
        }else if(txtIonDiameter.getText().trim().equals("")){
            lblMessage.setText("Ion diameter should not be left in blank");
        }
    }//GEN-LAST:event_btnAddActionPerformed

    private void tblIonDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblIonDataMouseClicked
        DefaultTableModel model = (DefaultTableModel) tblIonData.getModel();
        cmbIon.setSelectedItem(model.getValueAt(tblIonData.getSelectedRow(),0).toString());
        cmbValence.setSelectedItem(model.getValueAt(tblIonData.getSelectedRow(),1).toString());
        txtIonConcentration.setText(model.getValueAt(tblIonData.getSelectedRow(),2).toString());
        txtIonDiameter.setText(model.getValueAt(tblIonData.getSelectedRow(),3).toString());
    }//GEN-LAST:event_tblIonDataMouseClicked

    private void cmbValenceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbValenceActionPerformed
        // This button correspond to "COMBOBOX" to select the valence.
        //cmbValence.setEditable(cmbIon.`);
        Object SelectedItem = cmbValence.getSelectedItem();
        get_valence_change((String) SelectedItem, txtIonDiameter);
    }//GEN-LAST:event_cmbValenceActionPerformed

    private void txtIonDiameterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIonDiameterKeyReleased
        if ("0.0000000000000".equals(txtIonDiameter.getText())){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ShowMessages.getZeroIonDiameter(),
                "ERROR", JOptionPane.ERROR_MESSAGE);
            txtIonDiameter.setText("");
            txtIonDiameter.requestFocus();
        }
    }//GEN-LAST:event_txtIonDiameterKeyReleased

    private void txtIonDiameterKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIonDiameterKeyTyped
        // Validate only numbers
        char c = evt.getKeyChar();
        if (c == KeyEvent.VK_PERIOD && txtIonDiameter.getText().contains(".")){
            getToolkit().beep();
            evt.consume();
        }
        if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE
            && c != KeyEvent.VK_DELETE && c != KeyEvent.VK_PERIOD){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtIonDiameterKeyTyped

    private void txtIonConcentrationKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIonConcentrationKeyReleased
        if ("0.0000000000000".equals(txtIonConcentration.getText())){
            Toolkit.getDefaultToolkit().beep();
            JOptionPane.showMessageDialog(null, ShowMessages.getZeroIonConcentration(),
                "ERROR", JOptionPane.ERROR_MESSAGE);
            txtIonConcentration.setText("");
            txtIonConcentration.requestFocus();
        }
    }//GEN-LAST:event_txtIonConcentrationKeyReleased

    private void txtIonConcentrationKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIonConcentrationKeyTyped
        // Validate only numbers
        txtIonConcentration.setBackground(Color.WHITE);
        char c = evt.getKeyChar();
        if (c == KeyEvent.VK_PERIOD && txtIonConcentration.getText().contains(".")){
            getToolkit().beep();
            evt.consume();
        }
        if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE
            && c != KeyEvent.VK_DELETE && c != KeyEvent.VK_PERIOD){
            getToolkit().beep();
            evt.consume();
        }
    }//GEN-LAST:event_txtIonConcentrationKeyTyped

    private void txtIonConcentrationMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtIonConcentrationMouseClicked
        // Clear contents
        txtIonConcentration.setText("");
    }//GEN-LAST:event_txtIonConcentrationMouseClicked

    private void cmbIonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbIonActionPerformed
        DefaultComboBoxModel dcm = new DefaultComboBoxModel();
        cmbValence.setModel(dcm);
        dcm.removeAllElements();
        Object SelectedItem = cmbIon.getSelectedItem();
        IonLibrary.get_selected_ion(SelectedItem);
        /* Call function to show in the GUI what are the options of the selected
        Ion for the valence.                                               */
        get_valence_diameter(cmbValence, txtIonDiameter, txtIonMobility);
        cmbIon.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent event) {
                // Get the source of the component, which is our combo box.
                JComboBox comboBox = (JComboBox) event.getSource();
                Object selected = comboBox.getSelectedItem();
                if (selected != null){
                    lblIonValence.setEnabled(true);
                    lblIonConcentration.setEnabled(true);
                    cmbValence.setEnabled(true);
                    txtIonConcentration.setEnabled(true);
                    if (null != Utilities.getTheoryModel())
                    switch (Utilities.getTheoryModel()) {
                        case "PB":
                        lblIonDiameter.setEnabled(false);
                        txtIonDiameter.setEnabled(false);
                        break;
                    }else {
                        lblIonDiameter.setEnabled(true);
                        txtIonDiameter.setEnabled(true);
                        lblIonDiameter1.setEnabled(true);
                        txtIonMobility.setEnabled(true);
                    }
                }else{
                    lblIonValence.setEnabled(false);
                    lblIonConcentration.setEnabled(false);
                    lblIonDiameter.setEnabled(false);
                    cmbValence.setEnabled(false);
                    txtIonConcentration.setEnabled(false);
                    txtIonDiameter.setEnabled(false);
                    lblIonDiameter1.setEnabled(false);
                    txtIonMobility.setEnabled(false);
                }
            }
        });
    }//GEN-LAST:event_cmbIonActionPerformed

    private void cmbIonMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbIonMouseReleased
        // NOT VALID
    }//GEN-LAST:event_cmbIonMouseReleased

    private void txtcapacitanceresolKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtcapacitanceresolKeyTyped
        // TODO add your handling code here:
                // Validate only numbers
        char c = evt.getKeyChar();
        if (c == KeyEvent.VK_PERIOD && txtcapacitanceresol.getText().contains(".")){
            getToolkit().beep();
            evt.consume();
        }
        if (!Character.isDigit(c) && c != KeyEvent.VK_BACK_SPACE
            && c != KeyEvent.VK_DELETE && c != KeyEvent.VK_PERIOD){
            getToolkit().beep();
            evt.consume();
        }           
    }//GEN-LAST:event_txtcapacitanceresolKeyTyped

    private void txtcapacitanceresolActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtcapacitanceresolActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtcapacitanceresolActionPerformed
public static class ExtensionFilter implements FilenameFilter {
     String extension;
         public ExtensionFilter(String extension) {
    this.extension = "." + extension;
  }

  public boolean accept(File dir, String name) {
    return name.endsWith(extension);
  }
    }    public void propertyChange(PropertyChangeEvent evt) {
        
        if ("progress" == evt.getPropertyName()) {
            int progress = (Integer) evt.getNewValue();
            progressBar.setValue(progress);
            taskOutput.append(String.format(
                    "Completed %d%% of the Calculations.\n", task.getProgress()));
        } 
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

 class Task extends SwingWorker<Void, Void> {
        /*
         * Main task. Executed in background thread.
         */
     // it initizales a worker to:
     // calculate the capacitance parmeters and
     // calculate the soliton properties
        @Override
        public Void doInBackground() {

    //new code to generate capacitance and parameter b
                String[] strArray6 = new String[12];
                strArray6[0] = "0.684279";
                strArray6[1] = "0.752585";
                strArray6[2] = "1.42635";
                strArray6[3] = "18.3565";
                strArray6[4] = "-5.14878";
                strArray6[5] = "-2.74156";
                strArray6[6] = "-2.29457";
                strArray6[7] = "-1.9018";
                strArray6[8] = "-1.56952";
                strArray6[9] = "-0.977315";
                strArray6[10] = "-0.886975";
                strArray6[11] = "-0.841036";
                String[] strlabel = new String[12];
                strlabel[0] = "Configuration and setup..";
                strlabel[1] = "Electric circuit Resistances..";
                strlabel[2] = "Electric circuit Capacitances..";
                strlabel[3] = "Electrical transmission line setup..";
                strlabel[4] = "Soliton velocity profile..";
                strlabel[5] = "Soliton charge profile..";
                strlabel[6] = "Soliton propagation profile ..";
                strlabel[7] = "Final calculations...";
                strlabel[8] = "Compiling results...";
                strlabel[9] = "Generating output files..";
                strlabel[10] = "Compiling results...";
                strlabel[11] = "Generating plots...";                
                int[] porc = new int[12];
                 porc[0]=8;
                 porc[1]=16;
                 porc[2]=25;
                 porc[3]=32;
                 porc[4]=40;
                 porc[5]=48;
                 porc[6]=55;
                 porc[7]=64;
                 porc[8]=72;
                 porc[9]=78;
                 porc[10]=85;
                 porc[11]=95;
// define capacitance paramters for testing running 
             NumericalScheme.setTolerance("0.089");
             NumericalScheme.setMixing("0.098");
//
             WriteFilesSignal.write_sphere();
            {
                try {
                    RunAnalysis.run_sphere();
                } catch (IOException ex) {
                    Logger.getLogger(NanomaterialsUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            {
                try {
                    Thread.sleep(5000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(NanomaterialsUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

             String ddir = Utilities.getAnalysisPath()+ File.separator +"waitfile.tmp";
             File f3 = new File(ddir);
            while(f3.exists() && !f3.isDirectory()) {         
                                try { 
                                    Thread.sleep(5000);
                                } catch (InterruptedException ex) {
                                    Logger.getLogger(RunAnalysis.class.getName()).log(Level.SEVERE, null, ex);
                                }
            }
// run 12 times the cylindrical CSDFT to generate the table sigma versus surface potential
               for (int j = 1; j < 13; j++){
               setProgress(porc[j-1]);
               progressBar.setString(strlabel[j-1]);
               Solute.setCharge(strArray6[j-1]);
//               System.out.println(Solute.getCharge());
               WriteFilesSignal.write_cylinder();
            {
                try {
                    RunAnalysis.run_cylinder();
                } catch (IOException ex) {
                    Logger.getLogger(NanomaterialsUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            } 
            {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(NanomaterialsUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            File f = new File(ddir);
            while(f.exists() && !f.isDirectory()) {         
                                try { 
                                    Thread.sleep(1000);
                                } catch (InterruptedException ex) {
                                    Logger.getLogger(RunAnalysis.class.getName()).log(Level.SEVERE, null, ex);
                                }
            }
    // generate outfile table file zpsig.txt sigma versus surface potential
                String workingdir = System.getProperty("user.dir");
 //       String dir3 = homedir+"/filepaths.txt";
        String exe1 = workingdir+"/Linux/zp.sh "+
         System.getProperty("user.dir")+" "+PHModel.getUserTime()+
                    " " + Utilities.getAnalysisPath();
        
        RunAnalysis executable1 = new RunAnalysis(exe1);
         System.out.println(exe1);
            {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(NanomaterialsUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

// end j iteration and clean cylindrical output files
               }
        String exe8 = "rm "+Utilities.getAnalysisPath()+"/DensityProfile.dat";
        RunAnalysis executable8 = new RunAnalysis(exe8);
        String exe9 = "rm "+Utilities.getAnalysisPath()+"/ElectrostaticPotential.dat";
        RunAnalysis executable9 = new RunAnalysis(exe9);
        String exe7 = "rm "+Utilities.getAnalysisPath()+"/FMT_cyl_int_tab.dat";
        RunAnalysis executable7 = new RunAnalysis(exe7);
        String exe12 = "rm "+Utilities.getAnalysisPath()+"/IntegratedCharge.dat";
        RunAnalysis executable12 = new RunAnalysis(exe12);
        String exe10 = "rm "+Utilities.getAnalysisPath()+"/IonContributions.dat";
        RunAnalysis executable10 = new RunAnalysis(exe10);
        
//interpolating (fitting) code which uses the file zpsig.txt
// to calculate the capacitance Co and b parameters . it generates the file  bco.txt
        String workingdir = System.getProperty("user.dir");
        String exe11 = workingdir + "/Linux/pfit.sh "+
         System.getProperty("user.dir")+" "+PHModel.getUserTime()+
                    " " + Utilities.getAnalysisPath();
        RunAnalysis executable11 = new RunAnalysis(exe11);
        System.out.println(exe11);
// new idea
            {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(NanomaterialsUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
//reading capacitance parameters from file bco.txt
       File f = new File(Utilities.getAnalysisPath() +
                File.separatorChar + "bco.txt");
            if(f.exists() && !f.isDirectory()){
                                String type = Utilities.getAnalysisPath() +
                File.separatorChar + "bco.txt";
                ReadFiles.read_results(type);
                Results.strC1el = new String[Results.getNumLines()][Results.getNumCols()];
                Results.strC1el = Results.reader;
                NumericalScheme.setTolerance(Results.strC1el[0][0]);
                NumericalScheme.setMixing(Results.strC1el[0][1]);
            }
// it generate the input file and run the sigprop.sh code to calculate the soliton properties
             WriteFilesSignal.write_sphere();
            {
                try {
                    RunAnalysis.run_sphere();
                } catch (IOException ex) {
                    Logger.getLogger(NanomaterialsUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
            {
                try {
                    Thread.sleep(1000);
                } catch (InterruptedException ex) {
                    Logger.getLogger(NanomaterialsUI.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
    // clean up working files

            String exe14 = "rm "+workingdir+"/waitfile.tmp";;
            RunAnalysis executable14 = new RunAnalysis(exe14);
// result visualization
            Solute.setCharge("Thanks !!");
            btnSolve.setEnabled(true);
            ResultsUIsignal Results = new ResultsUIsignal(); 
            Results.setVisible(true);
            Results.requestFocus();
            Results.toFront();
           
            return null;
        }

        /*
         * Executed in event dispatching thread
         */
        @Override
        public void done() {
//Tell progress listener to stop updating progress bar.
            boolean done = true;
    Toolkit.getDefaultToolkit().beep();
//    btnSolve.setEnabled(true);
    setCursor(null); //turn off the wait cursor
    progressBar.setValue(progressBar.getMinimum());
    progressBar.setString("Thanks !!");
    taskOutput.append("Done!\n");
    saveresults.setEnabled(true);
//    emailaddress.setEnabled(true);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(NanomaterialsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(NanomaterialsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(NanomaterialsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NanomaterialsUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
    

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NanomaterialsUI().setVisible(true);
            }
        });
    }
    
        public void get_valence_diameter(JComboBox cmb, JTextField textbox, JTextField textbox1){
    /* This function writes the valence in the field, depending on the selected
      *  ion and saves the ion diameter into a variable. If an ion diameter 
      *  equal to zero is found, set corresponding radiobutton as enabled.
      */
        // Check if the ion diameter is different than zero         
        if (!IonLibrary.valN3[IonLibrary.getValPosition()].equals("0")){
            cmb.addItem("-3.0");
            cmb.setSelectedItem("-3.0");
            Ions.setDiameter((Double.parseDouble(IonLibrary.valN3[IonLibrary.getValPosition()])
                    *0.01)*2);
            Ions.setMobility((Double.parseDouble(IonLibrary.valP9[IonLibrary.getValPosition()])
                    ));
        }
        if (!IonLibrary.valN2[IonLibrary.getValPosition()].equals("0")){
            cmb.addItem("-2.0");
            cmb.setSelectedItem("-2.0");
            Ions.setDiameter((Double.parseDouble(IonLibrary.valN2[IonLibrary.getValPosition()])
                    *0.01)*2);
            Ions.setMobility((Double.parseDouble(IonLibrary.valP9[IonLibrary.getValPosition()])
                    ));
        }
        if (!IonLibrary.valN1[IonLibrary.getValPosition()].equals("0")){
            cmb.addItem("-1.0");
            cmb.setSelectedItem("-1.0");
            Ions.setDiameter((Double.parseDouble(IonLibrary.valN1[IonLibrary.getValPosition()])
                    *0.01)*2);
            Ions.setMobility((Double.parseDouble(IonLibrary.valP9[IonLibrary.getValPosition()])
                    ));
        }
        if (!IonLibrary.valP1[IonLibrary.getValPosition()].equals("0")){
            cmb.addItem("1.0");
            cmb.setSelectedItem("1.0");
            Ions.setDiameter((Double.parseDouble(IonLibrary.valP1[IonLibrary.getValPosition()])
                    *0.01)*2);
            Ions.setMobility((Double.parseDouble(IonLibrary.valP9[IonLibrary.getValPosition()])
                    ));
        }
        if (!IonLibrary.valP2[IonLibrary.getValPosition()].equals("0")){
            cmb.addItem("2.0");
            cmb.setSelectedItem("2.0");
            Ions.setDiameter((Double.parseDouble(IonLibrary.valP2[IonLibrary.getValPosition()])
                    *0.01)*2);
            Ions.setMobility((Double.parseDouble(IonLibrary.valP9[IonLibrary.getValPosition()])
                    ));
        }
        if (!IonLibrary.valP3[IonLibrary.getValPosition()].equals("0")){
            cmb.addItem("3.0");
            cmb.setSelectedItem("3.0");
            Ions.setDiameter((Double.parseDouble(IonLibrary.valP3[IonLibrary.getValPosition()])
                    *0.01)*2);
            Ions.setMobility((Double.parseDouble(IonLibrary.valP9[IonLibrary.getValPosition()])
                    ));
        }
        if (!IonLibrary.valP4[IonLibrary.getValPosition()].equals("0")){
            cmb.addItem("4.0");
            cmb.setSelectedItem("4.0");
            Ions.setDiameter((Double.parseDouble(IonLibrary.valP4[IonLibrary.getValPosition()])
                    *0.01)*2);
            Ions.setMobility((Double.parseDouble(IonLibrary.valP9[IonLibrary.getValPosition()])
                    ));
        }
        if (!IonLibrary.valP5[IonLibrary.getValPosition()].equals("0")){
            cmb.addItem("5.0");
            cmb.setSelectedItem("5.0");
            Ions.setDiameter((Double.parseDouble(IonLibrary.valP5[IonLibrary.getValPosition()])
                    *0.01)*2);
            Ions.setMobility((Double.parseDouble(IonLibrary.valP9[IonLibrary.getValPosition()])
                    ));
        }
        if (!IonLibrary.valP6[IonLibrary.getValPosition()].equals("0")){
            cmb.addItem("6.0");
            cmb.setSelectedItem("6.0");
            Ions.setDiameter((Double.parseDouble(IonLibrary.valP6[IonLibrary.getValPosition()])
                    *0.01)*2);
            Ions.setMobility((Double.parseDouble(IonLibrary.valP9[IonLibrary.getValPosition()])
                    ));
        }
        if (!IonLibrary.valP7[IonLibrary.getValPosition()].equals("0")){
            cmb.addItem("7.0");
            cmb.setSelectedItem("7.0");
            Ions.setDiameter((Double.parseDouble(IonLibrary.valP7[IonLibrary.getValPosition()])
                    *0.01)*2);
            Ions.setMobility((Double.parseDouble(IonLibrary.valP9[IonLibrary.getValPosition()])
                    ));
        }        
        if (!IonLibrary.valP8[IonLibrary.getValPosition()].equals("0")){
            cmb.addItem("8.0");
            cmb.setSelectedItem("8.0");
            Ions.setDiameter((Double.parseDouble(IonLibrary.valP8[IonLibrary.getValPosition()])
                    *0.01)*2);
            Ions.setMobility((Double.parseDouble(IonLibrary.valP9[IonLibrary.getValPosition()])
                    ));
        }
        // Save ion diameter
        int digitsAfterDecimal = 3;
        BigDecimal bigDecimal = BigDecimal.valueOf(Ions.getDiameter());
        // BigDecimal.ROUND_FLOOR is Rounding Mode..denote how your value is rounded off
        // Other ways are:- "ROUND_CEILING", "ROUND_DOWN", etc..
        bigDecimal = bigDecimal.setScale(digitsAfterDecimal, 
                BigDecimal.ROUND_FLOOR);
        Ions.setDiameter(Double.parseDouble(String.valueOf(bigDecimal)));
        if (null != Utilities.getTheoryModel()){
            if ("PB".equals(Utilities.getTheoryModel())){
                textbox.setText("1.0");
            }else {
                textbox.setText(String.valueOf(Ions.getDiameter()));
                textbox1.setText(String.valueOf(Ions.getMobility()));
            } 
        }
    }
    
    public void get_valence_change(String SelectedItem, JTextField textbox){
    /* This function writes the valence in the field, depending on the selected
      * ion.
      */      
        if (SelectedItem.equals("-3.0")){
            // Save ion diameter
            Ions.setDiameter(Double.parseDouble(IonLibrary.valN3[IonLibrary.getValPosition()])
                    *0.01*2);
        }
        if (SelectedItem.equals("-2.0")){
            // Save ion diameter
            Ions.setDiameter(Double.parseDouble(IonLibrary.valN2[IonLibrary.getValPosition()])
                    *0.01*2);
        }
        if (SelectedItem.equals("-1.0")){
            // Save ion diameter
            Ions.setDiameter(Double.parseDouble(IonLibrary.valN1[IonLibrary.getValPosition()])
                    *0.01*2);
        }
        if (SelectedItem.equals("1.0")){
            // Save ion diameter
            Ions.setDiameter(Double.parseDouble(IonLibrary.valP1[IonLibrary.getValPosition()])
                    *0.01*2);
        }
        if (SelectedItem.equals("2.0")){
            // Save ion diameter
            Ions.setDiameter(Double.parseDouble(IonLibrary.valP2[IonLibrary.getValPosition()])
                    *0.01*2);
        }
        if (SelectedItem.equals("3.0")){
            // Save ion diameter
            Ions.setDiameter(Double.parseDouble(IonLibrary.valP3[IonLibrary.getValPosition()])
                    *0.01*2);
        }
        if (SelectedItem.equals("4.0")){
            // Save ion diameter
            Ions.setDiameter(Double.parseDouble(IonLibrary.valP4[IonLibrary.getValPosition()])
                    *0.01*2);
        }
        if (SelectedItem.equals("5.0")){
            // Save ion diameter
            Ions.setDiameter(Double.parseDouble(IonLibrary.valP5[IonLibrary.getValPosition()])
                    *0.01*2);
        }
        if (SelectedItem.equals("6.0")){
            // Save ion diameter
            Ions.setDiameter(Double.parseDouble(IonLibrary.valP6[IonLibrary.getValPosition()])
                    *0.01*2);
        }
        if (SelectedItem.equals("7.0")){
            // Save ion diameter
            Ions.setDiameter(Double.parseDouble(IonLibrary.valP7[IonLibrary.getValPosition()])
                    *0.01*2);
        }
        if (SelectedItem.equals("8.0")){
            // Save ion diameter
            Ions.setDiameter(Double.parseDouble(IonLibrary.valP8[IonLibrary.getValPosition()])
                    *0.01*2);
        }
        int digitsAfterDecimal = 3;
        BigDecimal bigDecimal = BigDecimal.valueOf(Ions.getDiameter());
        // BigDecimal.ROUND_FLOOR is Rounding Mode..denote how your value is rounded off
        // Other ways are:- "ROUND_CEILING", "ROUND_DOWN", etc..
        bigDecimal = bigDecimal.setScale(digitsAfterDecimal,
                BigDecimal.ROUND_FLOOR);
        Ions.setDiameter(Double.parseDouble(String.valueOf(bigDecimal)));
        if (null != Utilities.getTheoryModel()){
            if ("PB".equals(Utilities.getTheoryModel())){
                textbox.setText("1.0");
            }else {
                textbox.setText(String.valueOf(Ions.getDiameter()));
            } 
        }
    }

    public void set_enabled_SoluteData_true(){
        // Set this information enabled
        lblSoluteChargeType.setEnabled(true);
        txtSoluteCharge.setEnabled(true);
        lblSoluteChargeUnits.setEnabled(true);
    }

    public void set_enabled_SoluteData_false(){
        // Set this information disabled
        lblSoluteChargeType.setEnabled(false);
        txtSoluteCharge.setEnabled(false);
        lblSoluteChargeUnits.setEnabled(false);
    }
    
    // This constructor gets the progress 
    public JProgressBar getProgressBar(){
        progressBar.setStringPainted(true);
        return progressBar;
    }

// This constructor gets the label messages
    public JLabel getLabel(){
//        JLabel label = null;
        return label;
    }

    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSolve;
    private javax.swing.JButton btnSolve1;
    private javax.swing.JButton btnUpdate;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.ButtonGroup buttonGroup3;
    private javax.swing.JComboBox cmbIon;
    private javax.swing.JComboBox cmbValence;
    private javax.swing.JTextField emailaddress;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel label;
    private javax.swing.JLabel lblDielectricConstant;
    private javax.swing.JLabel lblElectroValue;
    private javax.swing.JLabel lblElectroneutrality;
    private javax.swing.JLabel lblIonAngstroms;
    private javax.swing.JLabel lblIonAngstroms1;
    private javax.swing.JLabel lblIonConcentration;
    private javax.swing.JLabel lblIonDiameter;
    private javax.swing.JLabel lblIonDiameter1;
    private javax.swing.JLabel lblIonMolar;
    private javax.swing.JLabel lblIonSymbol;
    private javax.swing.JLabel lblIonValence;
    private javax.swing.JLabel lblMessage;
    private javax.swing.JLabel lblMixing;
    private javax.swing.JLabel lblResolution;
    private javax.swing.JLabel lblResolutionAngstroms;
    private javax.swing.JLabel lblResolutionAngstroms1;
    private javax.swing.JLabel lblSoluteAngstroms;
    private javax.swing.JLabel lblSoluteChargeType;
    private javax.swing.JLabel lblSoluteChargeUnits;
    private javax.swing.JLabel lblSoluteRadius;
    private javax.swing.JLabel lblSolventAngstroms;
    private javax.swing.JLabel lblSolventConcentration;
    private javax.swing.JLabel lblSolventDiameter;
    private javax.swing.JLabel lblSolventMolar;
    private javax.swing.JLabel lblTempUnits;
    private javax.swing.JLabel lblTolerance;
    private javax.swing.JPanel pnlDiameterType;
    private javax.swing.JPanel pnlElectrolyteDefinition;
    private javax.swing.JPanel pnlElectrostatic;
    private javax.swing.JPanel pnlIonData;
    private javax.swing.JPanel pnlNumericalRuntime;
    private javax.swing.JPanel pnlSteric;
    private javax.swing.JPanel pnlpHModel;
    public javax.swing.JProgressBar progressBar;
    private javax.swing.JRadioButton rbnCrystal;
    private javax.swing.JRadioButton rbnEffective;
    private javax.swing.JRadioButton rbnExperimentalData;
    private javax.swing.JRadioButton rbnHydrated;
    private javax.swing.JRadioButton rbnTheoreticalPred;
    private javax.swing.JButton saveresults;
    private javax.swing.JTextArea taskOutput;
    private javax.swing.JTable tblIonData;
    private javax.swing.JTable tblPHData;
    private javax.swing.JTextField txtDielectricConstant;
    private javax.swing.JTextField txtIonConcentration;
    private javax.swing.JTextField txtIonDiameter;
    private javax.swing.JTextField txtIonMobility;
    private javax.swing.JTextField txtMixing;
    private javax.swing.JTextField txtResolution;
    public static javax.swing.JTextField txtSoluteCharge;
    public static javax.swing.JTextField txtSoluteRadius;
    private javax.swing.JTextField txtSolventConcentration;
    private javax.swing.JTextField txtSolventDiameter;
    private javax.swing.JTextField txtTemperature;
    private javax.swing.JTextField txtTolerance;
    private javax.swing.JTextField txtcapacitanceresol;
    // End of variables declaration//GEN-END:variables
}
